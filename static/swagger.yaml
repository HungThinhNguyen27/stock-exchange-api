openapi: 3.0.3
info:
  title: Stock Exchange APIs
  description: |-
    This project aims to collect stock data from the Tiki-Exchange website and provide APIs to display stock information as well as perform buy/sell transactions on the stock market. The main goal of the project is to create a flexible and powerful system for managing stock data and executing transactions efficiently.
servers:
  - url: http://127.0.0.1:5010
tags:
  - name: Users
    description: Operations about user login/register
  - name: Stock 
    description: operations to display stock
  - name: Transaction 
    description: buying and selling transaction activities
paths:
  /login:
    post:
      tags:
        - Users
      summary: login 
      description: login on sever 
      operationId: login
      requestBody:
        description: login information
        content:
          application/json:
            schema: 
              type: object
              properties: 
                username:
                  type: string 
                  example: thinh123
                password: 
                  type: string 
                  example: 123456
        required: true
      responses:
        '200':
          description: Login Successful 
          content:
            application/json:
              schema: 
                type: object
                properties: 
                  message: 
                    type: string 
                    example: Login succsess 
                  access_token: 
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ0aGluaDEyMyIsInJvbGUiOiJ1c2VyIiwiZXhwIjoxNzEwODI1MjU0fQ.DbNH8Mf0rMLj4bUxMc0Yu-w6oIzLh3UpOUvOo0kc4Rw
        '400': 
          description: Missing username or password
        '401': 
          description:  Invalid username or password
  /account:
    post:
      tags:
        - Users
      summary: create-account 
      description: create account on sever 
      operationId: register
      requestBody:
        description: register information
        content:
          application/json:
            schema: 
              type: object
              properties: 
                user_name:
                  type: string 
                  example: thinh123
                password: 
                  type: string 
                  example: 123456
                full_name:
                  type: string 
                  example: nguyen hung thinh 
                date_of_birth: 
                  type: string 
                  example: 2001-01-01
                email:
                  type: string 
                  example: thinh123@gmail.com
                phone: 
                  type: string 
                  example: 0123456789
                country:
                  type: string 
                  example: vietnam
                role: 
                  type: string 
                  example: user
        required: true
      responses:
        '200':
          description: create User Successful 
          content:
            application/json:
              schema: 
                type: object
                properties: 
                  Create account successfully: 
                    type: string 
                    example: thinh123
        '400': 
          description: Missing username or password
        '401': 
          description:  Invalid username or password

  /account-balance:
    get:
      tags:
        - Users
      summary: Get account balance
      description: Retrieves the balance of the specified account.
      security:
        - BearerAuth: []
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  account:
                    type: string
                    example: "thinh123"
                  quantity_astra:
                    type: integer
                    example: 5396
                  quantity_coin:
                    type: integer
                    example: 90000
        401:
          description: Unauthorized access


  /stock-candles:
    get:
      tags:
        - Stock
      summary: Get stock-candles
      description: Retrieve stock information according to candlestick chart.
      parameters:
        - name: period
          in: query
          description: Enter the number of minutes -> 5, 15, 30, 60,1440(1D), 10080(1W)
          required: true
          schema:
            type: integer
            default: 5
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  metadata: 
                    type: string
                    example: {
                              "page_number": 1,
                              "total_pages": 14
                          }
                  stock_candles: 
                    type: string
                    example: [{
                          "close_price": 22,
                          "high_price": 23,
                          "low_price": 20,
                          "open_price": 22,
                          "time_stamp": "2024-03-18",
                          "volume": 1055345
                      },
                      {
                          "close_price": 22,
                          "high_price": 25,
                          "low_price": 22,
                          "open_price": 24,
                          "time_stamp": "2024-03-17",
                          "volume": 168776
                      },
                      {
                          "close_price": 24,
                          "high_price": 24,
                          "low_price": 20,
                          "open_price": 22,
                          "time_stamp": "2024-03-16",
                          "volume": 298295
                      },
                      {
                          "close_price": 22,
                          "high_price": 22,
                          "low_price": 20,
                          "open_price": 21,
                          "time_stamp": "2024-03-15",
                          "volume": 300775
                      },
                      {
                          "close_price": 21,
                          "high_price": 21,
                          "low_price": 19,
                          "open_price": 21,
                          "time_stamp": "2024-03-14",
                          "volume": 302777
                      },
                      {
                          "close_price": 21,
                          "high_price": 21,
                          "low_price": 20,
                          "open_price": 21,
                          "time_stamp": "2024-03-13",
                          "volume": 145527
                      },
                      {
                          "close_price": 21,
                          "high_price": 21,
                          "low_price": 19,
                          "open_price": 21,
                          "time_stamp": "2024-03-12",
                          "volume": 65694
                      },
                      {
                          "close_price": 21,
                          "high_price": 21,
                          "low_price": 19,
                          "open_price": 20,
                          "time_stamp": "2024-03-11",
                          "volume": 502715
                      },
                      {
                          "close_price": 20,
                          "high_price": 20,
                          "low_price": 20,
                          "open_price": 20,
                          "time_stamp": "2024-03-10",
                          "volume": 37161
                      },
                      {
                          "close_price": 20,
                          "high_price": 21,
                          "low_price": 19,
                          "open_price": 20,
                          "time_stamp": "2024-03-09",
                          "volume": 425702
                      }]
                  
        404:
          description: This page does not exist
  /download-stock-candles:
      get:
        tags:
          - Stock
        summary: download stock-candles
        description: download stock-candles by period and type-file 
        parameters:
          - name: period
            in: query
            description: Enter the number of minutes -> 5, 15, 30, 60,1440(1D), 10080(1W)
            required: true
            schema:
              type: integer
              default: 60
          - name: type-file 
            in: query
            description: Enter the type-file (json or csv)
            required: true
            schema:
              type: string
              default: json
        responses:
          200:
            description: Successful response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    status: 
                      type: string
                      example: {"status": "download file stock_info_60min.json success"}

  /book-orders-buy:
      get:
        tags:
          - Stock
        summary: Get book-orders-buy
        description: Retrieve buy order information
        parameters:
          - name: page
            in: query
            description: Page number for pagination
            required: false
            schema:
              type: integer
              default: 1
        responses:
          200:
            description: Successful response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    metadata: 
                      type: string
                      example: {
                                "page_number": 1,
                                "total_pages": 1
                            }
                    book_order_data: 
                      type: string
                      example: [
                              {
                                  "price": 27,
                                  "total_asa": 2704
                              }
                          ]
          404:
            description: This page does not exist



  /book-orders-sell:
      get:
        tags:
          - Stock
        summary: Get book-orders-sell
        description: Retrieve sell order information
        parameters:
          - name: page
            in: query
            description: Page number for pagination
            required: false
            schema:
              type: integer
              default: 1
        responses:
          200:
            description: Successful response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    metadata: 
                      type: string
                      example: {
                                "page_number": 1,
                                "total_pages": 1
                            }
                    book_order_data: 
                      type: string
                      example: [
                              {
                                  "price": 27,
                                  "total_asa": 2704
                              }
                          ]
          404:
            description: This page does not exist
            
  /market_trans_bought:
      get:
        tags:
          - Stock
        summary: Get market_trans_bought
        description: Print out the history of purchased transactions
        parameters:
          - name: page
            in: query
            description: Page number for pagination
            required: false
            schema:
              type: integer
              default: 1
        responses:
          200:
            description: Successful response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    metadata: 
                      type: string
                      example: {
                                "page_number": 1,
                                "total_pages": 3
                            }
                    nearest_price: 
                      type: integer
                      example: 27

                    book_order_data: 
                      type: string
                      example: [
                                {
                                    "Taker_type": "bought",
                                    "price": 27,
                                    "quantity_astra": 296,
                                    "transaction_date": "Mon, 18 Mar 2024 23:56:33 GMT"
                                },
                                {
                                    "Taker_type": "bought",
                                    "price": 20,
                                    "quantity_astra": 5100,
                                    "transaction_date": "Mon, 18 Mar 2024 23:56:33 GMT"
                                },
                                {
                                    "Taker_type": "bought",
                                    "price": 18,
                                    "quantity_astra": 4000,
                                    "transaction_date": "Tue, 12 Mar 2024 16:15:13 GMT"
                                },
                                {
                                    "Taker_type": "bought",
                                    "price": 18,
                                    "quantity_astra": 2000,
                                    "transaction_date": "Tue, 12 Mar 2024 16:07:45 GMT"
                                }
                            ]
          404:
            description: This page does not exist

  /market_trans_sold:
      get:
        tags:
          - Stock
        summary: Get market_trans_bought
        description: Print out the history of sold transactions
        parameters:
          - name: page
            in: query
            description: Page number for pagination
            required: false
            schema:
              type: integer
              default: 1
        responses:
          200:
            description: Successful response
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    metadata: 
                      type: string
                      example: {
                                "page_number": 1,
                                "total_pages": 3
                            }
                    nearest_price: 
                      type: integer
                      example: 27
                      
                    book_order_data: 
                      type: string
                      example: [
                            {
                                "Taker_type": "sold",
                                "price ": 20,
                                "quantity_astra": 2850,
                                "transaction_date": "Mon, 18 Mar 2024 23:56:33 GMT"
                            },
                            {
                                "Taker_type": "sold",
                                "price ": 20,
                                "quantity_astra": 1250,
                                "transaction_date": "Mon, 18 Mar 2024 23:56:33 GMT"
                            },
                            {
                                "Taker_type": "sold",
                                "price ": 20,
                                "quantity_astra": 1000,
                                "transaction_date": "Mon, 18 Mar 2024 23:56:33 GMT"
                            },
                            {
                                "Taker_type": "sold",
                                "price ": 27,
                                "quantity_astra": 296,
                                "transaction_date": "Mon, 18 Mar 2024 23:56:33 GMT"
                            },
                            {
                                "Taker_type": "sold",
                                "price ": 18,
                                "quantity_astra": 4000,
                                "transaction_date": "Tue, 12 Mar 2024 16:15:13 GMT"
                            },
                            {
                                "Taker_type": "sold",
                                "price ": 18,
                                "quantity_astra": 2000,
                                "transaction_date": "Tue, 12 Mar 2024 16:07:45 GMT"
                            }
                        ]
          404:
            description: This page does not exist
  /buy-now:
    post:
      tags:
        - Transaction
      summary: Transaction buy now
      description: Enter the amount of coins you want to use and the system will buy astra at the lowest price for you.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity_coin:
                  type: integer
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: [{
                              "asa_received": 37,
                              "coin_spent": 1000,
                              "price": 27,
                              "timestamp": "Sun, 24 Mar 2024 17:08:33 GMT",
                              "transaction": 1
                          }]
                  message:
                    type: string
                    example: Transaction completed successfully.
                  status:
                    type: string
                    example: success
        400:
          description: failed transaction or not enough quantity coins. 
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: null
                  message:
                    type: string
                    example: Insufficient funds for the transaction..
                  status:
                    type: string
                    example: error
        401:
          description: Unauthorized access

  /sell-now:
    post:
      tags:
        - Transaction
      summary: Transaction sell now
      description: Enter the amount of Astra you want to sell.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity_asa:
                  type: integer
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: [{
                              "asa_received": 37,
                              "coin_spent": 1000,
                              "price": 27,
                              "timestamp": "Sun, 24 Mar 2024 17:08:33 GMT",
                              "transaction": 1
                          }]
                  message:
                    type: string
                    example: Transaction completed successfully.
                  status:
                    type: string
                    example: success
        400:
          description: failed transaction or not enough quantity coins. 
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: null
                  message:
                    type: string
                    example: Insufficient funds for the transaction..
                  status:
                    type: string
                    example: error
        401:
          description: Unauthorized access

  /buy-limit:
    post:
      tags:
        - Transaction
      summary: Transaction buy limit
      description: Enter the amount of coins and price you want to buy astra.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                coins_quantity:
                  type: integer
                astra_price:
                  type: integer
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: {
                            "Amount of Asa will receive": 50,
                            "Astra Price": 20,
                            "The number of Coins you used": 1000
                        }
                  message:
                    type: string
                    example: Transaction completed successfully.
                  status:
                    type: string
                    example: success
        400:
          description: failed transaction or not enough quantity coins. 
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: null
                  message:
                    type: string
                    example: Insufficient funds for the transaction..
                  status:
                    type: string
                    example: error
        401:
          description: Unauthorized access

  /sell-limit:
    post:
      tags:
        - Transaction
      summary: Transaction sell limit
      description: Enter the amount of coins and price you want to sell astra.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                asa_quantity:
                  type: integer
                astra_price:
                  type: integer
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: {
                            "Amount of Coins will receive": 69000,
                            "Astra Price": 23,
                            "The number of Astra you used": 3000
                        }
                  message:
                    type: string
                    example: Transaction completed successfully.
                  status:
                    type: string
                    example: success
        400:
          description: failed transaction or not enough quantity coins. 
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    example: null
                  message:
                    type: string
                    example: Insufficient funds for the transaction..
                  status:
                    type: string
                    example: error
        401:
          description: Unauthorized access

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer 
      bearerFormat: JWT
  schemas:
      StockPrice:
        type: object
        properties:
          id:
            type: integer
          time_stamp:
            type: string
            format: datetime
          open_price:
            type: integer
          close_price:
            type: integer
          high_price:
            type: integer
          low_price:
            type: integer
          volume:
            type: integer
          type:
            type: string
            
      BookOrders:
        type: object
        properties:
          book_order_id:
            type: integer
          user_id:
            type: integer
          price_coins:
            type: integer
          amount_asa:
            type: integer
          total_coins:
            type: integer
          market:
            type: string
          created_at:
            type: string
            format: datetime
          taker_type:
            type: string

      MarketTransaction:
        type: object
        properties:
          transaction_id:
            type: integer
          quantity_coin:
            type: integer
          price:
            type: integer
          quantity_astra:
            type: integer
          transaction_date:
            type: string
            format: datetime
          taker_type:
            type: string
          user_id:
            type: integer

      Orders:
        type: object
        properties:
          order_id:
            type: integer
          user_id:
            type: integer
          order_type:
            type: string
          direction:
            type: string
          price_coins:
            type: integer
          quantity_astra:
            type: integer
          status:
            type: string
          order_date:
            type: string
            format: datetime

      User:
        type: object
        properties:
          user_id:
            type: integer
          username:
            type: string
          hashed_password:
            type: string
          full_name:
            type: string
          date_of_birth:
            type: string
            format: date
          email:
            type: string
          phone:
            type: string
          country:
            type: string
          quantity_coin:
            type: integer
          quantity_astra:
            type: integer
          role:
            type: string